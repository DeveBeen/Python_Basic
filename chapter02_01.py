# Chapter02 - 1
# 파이썬 완전 기초
# Print 사용법

# 기본 출력
print('Python Start!') #프린트문에서 가장 많이 사용함
print("Python Start!") #프린트문에서 가장 많이 사용함
print('''Python Start!''') #프린트문에서 잘 사용안함
print("""Python Start!""") #프린트문에서 잘 사용안함

# separator 옵션
print('P', 'Y', 'T', 'H', 'O', 'N', sep='') # sep(arator) 옵션으로 문자사이를 정의한다. 여기선 공백('')
print('010', '7777', '1234', sep='-') # sep(arator) 옵션으로 문자사이를 정의한다. 여기선 하이폰(-)
print('python', 'google.com', sep='@') # sep(arator) 옵션으로 문자사이를 정의한다. 여기선 골뱅이(@)

# end 옵션

print('Welcome to', end=' ') # 일반 print문은 자동으로 줄바꿈을 해주지만
print('IT News', end=' ') # end 옵션을 사용하여 다음 줄이 어떻게 넘어갈지 정의 할 수 있다.
print('Web Site') # 예시와 같이 end 옵션을 사용하여 줄바꿈을 하지 않고 한 줄로 정의할 수도 있다.(' ' 사용)

# file 옵션
import sys #import는 예약어
print('Learn Python', file=sys.stdout) #현재 이 내용을 외부에 (하드디스크, usb등) 지정하고싶을 떄 사용

# format 사용 (d:정수 , s:문자열, f:실수) ex) d=3, s='Python', f:3.1415926535
print('%s %s' % ('one', 'two')) # 문자열 s에 첫번째 %s엔 'one', 두번째 %s엔 'two'가 들어가 출력된다.
print('{} {}'.format('one', 'two')) # 위에랑 똑같이 출력이 된다. 하지만 여기선 format 함수를 사용하여 {}안에 들어가는 형태를 자동으로 인식한다.
print('{1} {0}'.format('one', 'two')) # 중괄호 내가 비어있을 땐, 자동으로 0으로 순서를 배열하여 인식한다. 하지만 여기선 지정을 해줬으므로 'two'라는 문자열이 먼저 출력된다.

# %s 사용법 + 자릿수
print('%10s' % ('nice')) # 문자열을 출력하되, %"N"s라 지정했으므로, 10자리를 출력한다. (총 10자리 'nice'를 포함)
print('{:>10}'.format('nice')) # 위와 같은 방식으로 format을 사용시 자릿 수 지정방법이다.여기선 :>으로 왼쪽으로 여백을 두게 출력하는 기호를 사용했다.

print('%-10s' % ('nice')) # 위와 같은 형식이나 '-' 기호를 붙여 공백을 우측 출력으로 변환시킨 것이다.
print('{:10}'.format('nice')) # 똑같이 이는 위와같은 방식이나, '>' 기호를 생략해 공백을 우측 출력으로 변환시킨 것이다.

print('{:_>10}'.format('nice')) # ':'기호와 '>'기호 사이의 '_'를 넣으므로 공백이 아닌 '_'가 10자리를 채워서 출력된다.
print('{:^10}'.format('nice')) # '>'기호는 좌측의 여백 또는 '?'기호를 넣는 것이고 여기에서의 '^'기호는 format으로 지정해준 텍스트를 중앙의 출력한다.

print('%5s' % ('pythonsyudy')) # %5s로 문자열의 크기를 5로 지정을 했지만, 지정한 문자 전부 출력한다.
print('%.5s' % ('pythonsyudy')) # 위 문제를 해결하기 위해 %5s가 아닌 %.5s로 입력을 해주므로 지정한문자 중에서도 앞 5 크기의 문자만 인식하여 출력한다.
print('{:10.5}'.format('pythonstudy')) # 이는 위와 같은 형태처럼 나오는 듯 하나, 10.5로 출력 크기를 지정하였으므로 format으로 지정한 문자에서 5크기 만큼만 출력하되 전체 문자열 크기는 10으로 출력된다.

# %d 사용법 + 자릿수
print('%d %d' % (1, 2)) # %d(정수형)도 %s(문자열)와 같은 형태를 가진다.
print('{} {}'.format(1,2)) # 물론 format은 형태 지정을 할 필요가 없으므로, .format()에서 괄호안에서 지정해주면 된다. (정확도는 떨어질 수 있으나, 편리성, 가독성면에선 뛰어나다.)

print('%4d' % (42)) # 이러한 형태 또한 %s 사용법에서 설명한 것과 똑같다.
print('{:4d}'.format(42)) # format형은 자릿수 표기가 형태에 따라 조금은 다른다, 문자열에선 {}안에 따로 형태가 무엇인지 선언을 해줄 필요가 없었지만, 정수형을 사용할 때는 d를 따로 붙여 선언했다.

# %f 사용법 + 자릿수
print('%f' % (3.14159265358979)) # %f(실수형)은 따로 자릿수를 지정하지 않으면, 입력한 값의 자릿수가 일정 수치를 지나면 생략되어 출력된다.
print('%1.8f' % (3.14159265358979)) # 실수형은 정수부와 소수부로 나눌 수 있는데, '%'와 'f' 사이에 지정해준 자릿수가 'k.n'이라면, 정수는 k자리만 소수는 n자리만 출력하라는 소리다.
print('%1.18f' % (3.14159265358979)) # 만약 이처럼 내가 입력한 값의 소수부보다 더 많은 양을 자릿수로 선언하면, 부동 소수점 (의미없는 수)가 붙어서 자릿수를 맞춰 출력된다.
print('{:f}'.format(3.14159265358979)) # 여기도 마찬가지로 {}안에 f형을 선언하자.

print('%06.2f' % (3.14159265358979)) # 06.2에서 06은 정수부를 6자리 소수부를 2자리로 출력하라는 뜻이다. 하지만 정수부가 6자리가 되지 않으므로, 여기선 06은 여백은 0으로 소수부는 2자리만 전부 6자리라는 뜻이다.
print('{:06.2f}'.format(3.14159265358979)) # 위 식을 format으로 표현
# 만약 위가 06.2가 아닌 06.8이 되면, 소수부분이 8자리가 출력되는게 '우선'이므로 소수 8자리 출력되고 0으로 채워지던 정수부분은 '3'만 출력된다. 따라서 총 자릿수는 6자리가 넘어간다.
